Transform: AWS::Serverless-2016-10-31

Parameters:
  EnvironmentName:
    Description: The environment name is determined by the current branch you are deploying from.
    Type: String
    Default: staging

Resources:
  TestApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: Test_Name
      Description: Test
      StageName: Prod
    Domain:
      DomainName: Test
      CertificateArn: Test

  AppApiDomainMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: Test
      RestApiId: TestApiGateway
      BasePath: axum
      Stage: 
        Ref: TestApiGateway.Stage

  TestAxum:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Architectures:
        - x86_64      
      ImageUri: test-axum
      Events:
        Index:
          Type: Api
          Properties:
            RestApiId: 
              Ref: TestApiGateway
            Path: /
            Method: ANY
        Main:
          Type: Api
          Properties:
            RestApiId: TestApiGateway
              # Ref: TestApiGateway
            Path: /{path+}
            Method: ANY
      Timeout: 30
      MemorySize: 50
      Environment:
        Variables:
          TEST_VAR: testing
          TEST_SECOND: 
            Ref: Domain
  #
  # TestRust:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     PackageType: Image
  #     Architectures:
  #       - arm64      
  #     ImageUri: test-rust
  #     Events:
  #       Main:
  #         Type: Api
  #         Properties:
  #           Path: /test-rust-route
  #           Method: ANY
  # TestLambdaNode:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     PackageType: Image
  #     Architectures:
  #       - arm64      
  #     ImageUri: test-lambda-node
  #     Events:
  #       Main:
  #         Type: Api
  #         Properties:
  #           Path: /test-lambda-node-route
  #           Method: ANY
  # TestS3Upload:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     PackageType: Image
  #     Architectures:
  #       - arm64      
  #     ImageUri: test-s3-upload
  #     Events:
  #       MySQSEvent:
  #         Type: SQS
  #         Properties:
  #           Queue: 
  #             Fn::GetAtt: TestDeliverySQS.Arn
  #           BatchSize: 10
  # TestDeliverySQS:
  #   Type: AWS::SQS::Queue
  #   Properties:
  #     QueueName: TestDeliverySQS
  #
  # TestANewDeliverySQS:
  #   Type: AWS::SQS::Queue
  #   Properties:
  #     QueueName: TestANewDeliverySQS
  #
  # DBInstance:
  #   Type: AWS::RDS::DBInstance
  #   Properties:
  #     Engine: aurora-postgresql
  #     DBInstanceClass: db.serverless
  #     DBClusterIdentifier: Ref DBCluster
  #
  # HardcodedNameBucket:
  #   Type: "AWS::S3::Bucket"
  #   Properties:
  #     BucketName: test-bucket-001
  #     AccessControl: Private
  #     NotificationConfiguration:
  #       QueueConfigurations:
  #         - Event: s3:ObjectCreated:Put
  #           Queue: TestDeliverySQS
  #     PublicAccessBlockConfiguration:
  #       BlockPublicAcls: true
  #       IgnorePublicAcls: true
  #       BlockPublicPolicy: true
  #       RestrictPublicBuckets: true
  #
  # DynamicNameBucket:
  #   Type: "AWS::S3::Bucket"
  #   Properties:
  #     # BucketName: !Sub "${EnvironmentName}-test-bucket"
  #     BucketName: 
  #       Fn::Sub: 
  #         - "${EnvironmentName}-test-bucket"
  #         - EnvironmentName:
  #             Ref: EnvironmentName
  #     AccessControl: Private
  #     PublicAccessBlockConfiguration:
  #       BlockPublicAcls: true
  #       IgnorePublicAcls: true
  #       BlockPublicPolicy: true
  #       RestrictPublicBuckets: true
