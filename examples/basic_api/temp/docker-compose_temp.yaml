version: '3.9'

networks:
  development:
    attachable: true

volumes:
  sqs-local: {}
  s3-local: {}
  postgres-local: {}

services:
  # Custom local invoker. Will run the local store for lambda invocation and handle via Lambda Runtime API
  sam-e-invoker:
    init: true
    image: sam-e-invoker
    build:
      context: ~/Work/sam-e/
      dockerfile: Dockerfile.invoker
    environment:
      - RUST_LOG=app=debug
      - CONFIG=$CONFIG
    depends_on:
      - sqs-local
    networks:
      - development
    ports:
      - 3000:3000
    mem_limit: 250m
    volumes:
      - /home/ubuntu/.aws/credentials:/root/.aws/credentials:ro

  # *********************** Custom lambdas ***************************
  # Each of the lambda functions is run as a separate docker container that will communicate with the local invoker

  # TestLambdaNode:
  #   init: true
  #   image: test-lambda-node
  #   networks:
  #     - development
  #   deploy:
  #     replicas: 1
  #   depends_on:
  #     - sam-e-invoker
  #   environment:
  #     - AWS_LAMBDA_RUNTIME_API=http://sam-e-invoker:3000/TestLambdaNode
  #     - AWS_LAMBDA_FUNCTION_NAME=TestLambdaNode
  #     - AWS_LAMBDA_FUNCTION_MEMORY_SIZE=50
  #     - AWS_LAMBDA_FUNCTION_VERSION=1
  #     - AWS_LAMBDA_LOG_STREAM_NAME=TestLambdaNode
  #     - AWS_LAMBDA_LOG_GROUP_NAME=aws/lambda/TestLambdaNode
      
  TestAxum:
    init: true
    image: test-axum
    networks:
      - development
    deploy:
      replicas: 1
    depends_on:
      - sam-e-invoker
    environment:
      - AWS_LAMBDA_RUNTIME_API=http://sam-e-invoker:3000/TestAxum
      - AWS_LAMBDA_FUNCTION_NAME=TestAxum
      - AWS_LAMBDA_FUNCTION_MEMORY_SIZE=50
      - AWS_LAMBDA_FUNCTION_VERSION=1
      - AWS_LAMBDA_LOG_STREAM_NAME=TestAxum
      - AWS_LAMBDA_LOG_GROUP_NAME=aws/lambda/TestAxum
      - TEST_SECOND=Domain
      - TEST_VAR=testing
    volumes:
      - /home/ubuntu/.aws/credentials:/root/.aws/credentials:ro
      
  TestRust:
    init: true
    image: test-rust
    networks:
      - development
    deploy:
      replicas: 1
    depends_on:
      - sam-e-invoker
    environment:
      - AWS_LAMBDA_RUNTIME_API=http://sam-e-invoker:3000/TestRust
      - AWS_LAMBDA_FUNCTION_NAME=TestRust
      - AWS_LAMBDA_FUNCTION_MEMORY_SIZE=50
      - AWS_LAMBDA_FUNCTION_VERSION=1
      - AWS_LAMBDA_LOG_STREAM_NAME=TestRust
      - AWS_LAMBDA_LOG_GROUP_NAME=aws/lambda/TestRust
      

  # *********************** Custom infrastructure ***************************
  # Each of the local infrastructure needed depending on the infrastructure added in CloudFormation template
  sqs-local:
    init: true
    image: softwaremill/elasticmq-native
    networks:
      - development
    ports:
      - 9324:9324
      - 9325:9325
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://sqs-local:9325"]
    #   interval: 5s
    #   timeout: 10s
    #   retries: 5
    # NOTE: volumes don't work when using VM because this location refers to host
    # volumes:
    #   - ./local-queue/custom.conf:/opt/elasticmq.conf
  s3-local:
    init: true
    image: s3-local
    build:
      context: ./local-s3/
      dockerfile: Dockerfile
    ports:
      - 9000:9000
      - 9001:9001
    environment:
      - MINIO_ROOT_USER=user
      - MINIO_ROOT_PASSWORD=password
    networks:
      - development
    volumes:
      - s3-local:/mnt/data
  postgres-local:
    init: true
    image: postgres:15
    environment:
      POSTGRES_PASSWORD: password
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - 5432:5432
    networks:
      - development
    volumes:
      - postgres-local:/var/lib/postgresql/data

  # dynamodb-local:
  #   init: true
  #   command: "-XX:-UsePerfData -Xmx10g -jar DynamoDBLocal.jar -inMemory -sharedDb"
  #   image: "crcdockerdevops/dynamodb-local:1.20.0"
  #   # image: "amazon/dynamodb-local:1.20.0"
  #   ports:
  #     - "8000:8000"
  #   networks:
  #     - development   
  # 
  # dynamodb-admin:
  #   init: true
  #   environment:
  #     - DYNAMO_ENDPOINT=http://dynamodb-local:8000
  #     - PORT=8001
  #   image: crcdockerdevops/dynamodb-admin:4.1.0
  #   ports:
  #     - "8001:8001"    
  #   networks:
  #     - development
