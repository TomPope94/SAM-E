networks:
  development:
    attachable: true

volumes:
{%- set postgres_volume = false %}
{%- set mysql_volume = false %}
{%- set sqs_volume = false %}
{%- set s3_volume = false %}
{%- for infra in infrastructure %}
{%- if infra.infrastructure_type == "Mysql" and not mysql_volume -%}
  {%- set_global mysql_volume = true %}
  mysql-local: {}
{%- elif infra.infrastructure_type == "Postgres" and not postgres_volume -%}
  {%- set_global postgres_volume = true %}
  postgres-local: {}
{%- elif infra.infrastructure_type == "SQS" and not sqs_volume -%}
  {%- set_global sqs_volume = true %}
  sqs-local: {}
{%- elif infra.infrastructure_type == "S3" and not s3_volume -%}
  {%- set_global s3_volume = true %}
  s3-local: {}
{%- endif %}
{%- endfor %}

services:
  # Custom local invoker. Will run the local store for lambda invocation and handle via Lambda Runtime API
  sam-e-invoker:
    init: true
    image: tompope94/sam-e-invoker
    environment:
      - RUST_LOG=sam_e_invoker=debug,sam_e_source_apigw=debug,sam_e_source_sqs=debug,sam_e_source_s3=debug,sam_e_source_eventbridge=debug
      - CONFIG=$CONFIG
    {%- if sqs_volume %}
    depends_on:
      - sqs-local
    {%- endif %}
    networks:
      - development
    ports:
      - 3030:3030
      - 3000:3000
      - 3001:3001
      - 3002:3002
    mem_limit: 250m
    volumes:
      - {{runtime.credentials_location}}:/root/.aws/credentials:ro

  # *********************** Custom lambdas ***************************
  # Each of the lambda functions is run as a separate docker container that will communicate with the local invoker
{% for lambda in lambdas %}
  {{lambda.name}}:
    init: true
    image: ${REGISTRY}/{{lambda.image}}:latest
    networks:
      - development
    deploy:
      replicas: 1
    volumes:
      - {{runtime.credentials_location}}:/root/.aws/credentials:ro
    environment:
      - AWS_LAMBDA_RUNTIME_API=http://sam-e-invoker:3030/{{lambda.name}}
      - AWS_LAMBDA_FUNCTION_NAME={{lambda.name}}
      - AWS_LAMBDA_FUNCTION_MEMORY_SIZE=50
      - AWS_LAMBDA_FUNCTION_VERSION=1
      - AWS_LAMBDA_LOG_STREAM_NAME={{lambda.name}}
      - AWS_LAMBDA_LOG_GROUP_NAME=aws/lambda/{{lambda.name}}
      {% for key, value in lambda.environment_vars -%}
      - {{key}}={{value}}
      {% endfor -%}
{% endfor %}

{%- if frontend %}
  frontend_{{frontend.name}}:
    init: true
    build:
      context: {{frontend.docker_build.context}}
      dockerfile: dockerfile.nginx
    ports:
      - 8080:80
    networks:
      - development
    restart: unless-stopped
{%- endif %}

  # *********************** Custom infrastructure ***************************
  # Each of the local infrastructure needed depending on the infrastructure added in CloudFormation template
{%- set postgres_container = false %}
{%- set mysql_container = false %}
{%- set sqs_container = false %}
{%- set s3_container = false %}
{%- for infra in infrastructure %}
{%- if infra.infrastructure_type == "Mysql" and not mysql_container -%}
  {%- set_global mysql_container = true %}
  mysql-local:
    init: true
    image: crcdockerdevops/mysql:8.0.29
    environment:
      USER: user
      PASSWORD: password
    ports:
      - 3306:3306
    networks:
      - development
    volumes:
      - mysql-local:/var/lib/mysql
{%- elif infra.infrastructure_type == "Postgres" and not postgres_container -%}
  {%- set_global postgres_container = true %}
  postgres-local:
    init: true
    image: postgres:15
    environment:
      POSTGRES_PASSWORD: password
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - 5432:5432
    networks:
      - development
    volumes:
      - postgres-local:/var/lib/postgresql/data
{%- elif infra.infrastructure_type == "SQS" and not sqs_container -%}
  {%- set_global sqs_container = true %}
  sqs-local:
    init: true
    image: softwaremill/elasticmq-native
    ports:
      - 9324:9324
      - 9325:9325
    networks:
      - development
    # NOTE: volumes don't work when using VM because this location refers to host
    # volumes:
    #   - ./local-queue/custom.conf:/opt/elasticmq.conf
{%- elif infra.infrastructure_type == "S3" and not s3_container -%}
  {%- set_global s3_container = true %}
  s3-local:
    init: true
    image: s3-local
    build:
      context: ./local-s3/
      dockerfile: Dockerfile
    ports:
      - 9000:9000
      - 9001:9001
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - MINIO_NOTIFY_WEBHOOK_ENABLE_LOCAL=on
      - MINIO_NOTIFY_WEBHOOK_ENDPOINT_LOCAL=http://sam-e-invoker:3001/
    networks:
      - development
    volumes:
      - s3-local:/data
{%- endif %}
{%- endfor %}

